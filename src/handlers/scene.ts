import { AvatarType, EntityType } from "../../resources/autogenerated/common.define";
import { BattleAvatar } from "../../resources/autogenerated/common.gamecore";
import { GetCurBattleInfoCsReq, GetCurBattleInfoScRsp } from "../../resources/autogenerated/cs.battle";
import { SceneBattleInfo } from "../../resources/autogenerated/cs.common";
import { ExtraLineupType, GetCurLineupDataCsReq, GetCurLineupDataScRsp, LineupAvatar, LineupInfo } from "../../resources/autogenerated/cs.lineup";
import { GetCurSceneInfoCsReq, GetCurSceneInfoScRsp, GetSpringRecoverDataCsReq, MotionInfo, SceneActorInfo, SceneEntityInfo, SceneInfo, Vector } from "../../resources/autogenerated/cs.scene";
import { PacketContext, RouteManager } from "../network/route";

export class SceneHandler{
    constructor(routeManager: RouteManager){
        routeManager.on(GetCurSceneInfoCsReq, this.GetCurSceneInfoCsReq);
        routeManager.on(GetCurLineupDataCsReq, this.GetCurLineupDataCsReq);
        routeManager.on(GetCurBattleInfoCsReq, this.GetCurBattleInfoCsReq);
    }

    public GetCurBattleInfoCsReq(context: PacketContext<GetCurBattleInfoCsReq>){
        const rsp = GetCurBattleInfoScRsp.create();
        rsp.avatarList = [
            BattleAvatar.create({
                avatarType: AvatarType.AVATAR_FORMAL_TYPE,
                equipmentList: [],
                hp: 1000,
                id: 1001,
                index: 1,
                level: 60,
                promotion: 1,
                rank: 1,
                relicList: [],
                skilltreeList: [],
                sp: 1000
            })
        ]
        rsp.battleInfo = SceneBattleInfo.create({
            battleAvatarList: [
                BattleAvatar.create({
                    avatarType: AvatarType.AVATAR_FORMAL_TYPE,
                    equipmentList: [],
                    hp: 1000,
                    id: 1001,
                    index: 1,
                    level: 60,
                    promotion: 1,
                    rank: 1,
                    relicList: [],
                    skilltreeList: [],
                    sp: 1000
                })
            ],
        });
        rsp.retcode = 0;
        context.send(GetCurBattleInfoScRsp, rsp);
    }

    public GetCurLineupDataCsReq(context: PacketContext<GetCurLineupDataCsReq>){
        const rsp = GetCurLineupDataScRsp.create();
        rsp.retcode = 0;
        rsp.lineup = LineupInfo.create({
            avatarList: [
                LineupAvatar.create({
                    avatarType: AvatarType.AVATAR_FORMAL_TYPE,
                    hp: 1000,
                    id: 1001,
                    satiety: 10,
                    slot: 1,
                    sp: 1,
                })
            ],
            name: "CloudySR",
            extraLineupType: ExtraLineupType.LINEUP_NONE,
            index: 0,
            leaderSlot: 0,
            planeId: 10000,
            isVirtual: true,
            mp: 0
        });
        context.send(GetCurLineupDataScRsp, rsp);
    };
    
    public GetCurSceneInfoCsReq(context: PacketContext<GetCurSceneInfoCsReq>){
        const rsp = GetCurSceneInfoScRsp.create();
        rsp.retcode = 0;
        rsp.scene = SceneInfo.create({
            entityBuffList: [],
            entityList: [
                SceneEntityInfo.create({
                    entityId: (EntityType.ENTITY_AVATAR << 24) + 1,
                    groupId: 1,
                    instId: 1,
                    motion: MotionInfo.create({
                        pos: Vector.create({
                            x: 100,
                            y: 100,
                            z: 100,
                        }),
                        rot: Vector.create({
                            x: 0,
                            y: 0,
                            z: 0,
                        }),
                    }),
                    entity: {
                        "oneofKind": "actor",
                        "actor": SceneActorInfo.create({
                            avatarType: AvatarType.AVATAR_FORMAL_TYPE,
                            baseAvatarId: 1001,
                            uid: 1,
                        })
                    }
                })
            ],
            planeId: 10000,
            leaderEntityId: (EntityType.ENTITY_AVATAR << 24) + 1,
            floorId: 10000000
        });
        context.send(GetCurSceneInfoScRsp, rsp);
    }
}