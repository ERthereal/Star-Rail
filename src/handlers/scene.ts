import { AvatarType, EntityType, FeatureSwitchInfo, FeatureSwitchParam, FeatureSwitchType } from "../../resources/autogenerated/common.define";
import { AvatarSkillTree, BattleAvatar, BattleEndStatus, BattleEquipment } from "../../resources/autogenerated/common.gamecore";
import { GetCurBattleInfoCsReq, GetCurBattleInfoScRsp, QuitBattleCsReq, QuitBattleScRsp } from "../../resources/autogenerated/cs.battle";
import { SceneBattleInfo } from "../../resources/autogenerated/cs.common";
import { ExtraLineupType, GetCurLineupDataCsReq, GetCurLineupDataScRsp, LineupAvatar, LineupInfo } from "../../resources/autogenerated/cs.lineup";
import { UpdateFeatureSwitchScNotify } from "../../resources/autogenerated/cs.player";
import { GetCurSceneInfoCsReq, GetCurSceneInfoScRsp, MotionInfo, SceneActorInfo, SceneEntityInfo, SceneEntityUpdateScNotify, SceneInfo, Vector } from "../../resources/autogenerated/cs.scene";
import { PacketContext, RouteManager } from "../network/route";

export class SceneHandler {
    constructor(routeManager: RouteManager) {
        routeManager.on(GetCurSceneInfoCsReq, this.GetCurSceneInfoCsReq);
        routeManager.on(GetCurLineupDataCsReq, this.GetCurLineupDataCsReq);
        routeManager.on(GetCurBattleInfoCsReq, this.GetCurBattleInfoCsReq);
        routeManager.on(QuitBattleCsReq, this.QuitBattleCsReq);
    }

    public QuitBattleCsReq(context: PacketContext<QuitBattleCsReq>) {
        const rsp = QuitBattleScRsp.create();
        rsp.retcode = 0;
        context.send(QuitBattleScRsp, rsp);
    }

    public GetCurBattleInfoCsReq(context: PacketContext<GetCurBattleInfoCsReq>) {
        const rsp = GetCurBattleInfoScRsp.create();
        rsp.retcode = 0;
        rsp.avatarList = [
            BattleAvatar.create({
                avatarType: 3,
                id: 1001,
                level: 1,
                promotion: 1,
                rank: 1,
                skilltreeList: [],
                hp: 1000,
                sp: 1000,
                index: 1
            })
        ];

        rsp.battleInfo = SceneBattleInfo.create();
        rsp.stageId = 10000;
        rsp.logicRandomSeed = 1;
        rsp.lastEndStatus = BattleEndStatus.BATTLE_END_WIN;
        rsp.lastEventId = 0;
        context.send(GetCurBattleInfoScRsp, rsp);
    }

    public GetCurLineupDataCsReq(context: PacketContext<GetCurLineupDataCsReq>) {
        const rsp = GetCurLineupDataScRsp.create();
        rsp.retcode = 0;
        rsp.lineup = LineupInfo.create({
            avatarList: [
                LineupAvatar.create({
                    slot: 1,
                    avatarType: AvatarType.AVATAR_FORMAL_TYPE,
                    id: 1001,
                    hp: 100,
                    sp: 100,
                    satiety: 100
                })
            ],
            index: 1,
            isVirtual: false,
            mp: 100,
            name: 'CloudySR',
            planeId: 10000,
            leaderSlot: 1
        });
        context.send(GetCurLineupDataScRsp, rsp);
    };

    public GetCurSceneInfoCsReq(context: PacketContext<GetCurSceneInfoCsReq>) {
        const rsp = GetCurSceneInfoScRsp.create();
        rsp.retcode = 0;
        rsp.scene = SceneInfo.create({
            planeId: 10000,
            floorId: 10000000,
            entityList: [],
            entityBuffList: [],
            entryId: 10001,
            envBuffList: [],
            gameModeType: 1,
            lightenSectionList: []
        });
        context.send(UpdateFeatureSwitchScNotify, UpdateFeatureSwitchScNotify.clone({
            switchInfoList: [
                FeatureSwitchInfo.create({
                    type: FeatureSwitchType.FEATURE_SWITCH_LINEUP_NAME,
                    isAllClosed: false,
                    switchList: [
                        FeatureSwitchParam.create({
                            paramList: [1]
                        }),
                    ]
                }),
                FeatureSwitchInfo.create({
                    type: FeatureSwitchType.FEATURE_SWITCH_NONE,
                    isAllClosed: false,
                    switchList: [
                        FeatureSwitchParam.create({
                            paramList: [1]
                        }),
                    ]
                }),
                FeatureSwitchInfo.create({
                    type: FeatureSwitchType.FEATURE_SWITCH_SHOP,
                    isAllClosed: false,
                    switchList: [
                        FeatureSwitchParam.create({
                            paramList: [1]
                        }),
                    ]
                }),
            ]
        }));
        context.send(GetCurSceneInfoScRsp, rsp);
    }
}