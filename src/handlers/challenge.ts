import { ChallengeStatus, CurChallenge, GetChallengeCsReq, GetChallengeScRsp, KillMonster, StartChallengeCsReq, StartChallengeScRsp } from "../../resources/autogenerated/cs.challenge";
import { ExtraLineupType } from "../../resources/autogenerated/cs.lineup";
import { GetMazeCsReq, GetMazeScRsp, GetMazeTimeOfDayCsReq, GetMazeTimeOfDayScRsp, Maze } from "../../resources/autogenerated/cs.maze";
import { GetChallengeRaidInfoCsReq, GetChallengeRaidInfoScRsp } from "../../resources/autogenerated/cs.raid";
import { PacketContext, RouteManager } from "../network/route";

export class ChallengeHandler{
    constructor(routeManager: RouteManager){
        routeManager.on(GetChallengeCsReq, this.GetChallengeCsReq);
        routeManager.on(GetMazeCsReq, this.GetMazeCsReq);
        routeManager.on(GetMazeTimeOfDayCsReq, this.GetMazeTimeOfDayCsReq);
        routeManager.on(GetChallengeRaidInfoCsReq, this.GetChallengeRaidInfoCsReq)
        routeManager.on(StartChallengeCsReq, this.StartChallengeCsReq);
    }

    public StartChallengeCsReq(context: PacketContext<StartChallengeCsReq>){
        console.log(context.request.challengeId);
        const rsp = StartChallengeScRsp.create();
        rsp.retcode = 0;
        rsp.curChallenge = CurChallenge.create({
            challengeId: context.request.challengeId!,
            extraLineupType: ExtraLineupType.LINEUP_CHALLENGE,
            deadAvatarNum: 0,
            killMonsterList: [
                KillMonster.create({
                    monsterId: 1022020,
                    killNum: 5
                })
            ],
            rounds: 1,
            status: ChallengeStatus.CHALLENGE_DOING
        });
        context.send(StartChallengeScRsp, rsp);
    }

    public GetChallengeRaidInfoCsReq(context: PacketContext<GetChallengeRaidInfoCsReq>){
        const rsp = GetChallengeRaidInfoScRsp.create();
        rsp.retcode = 0;
        rsp.challengeRaidList = [];
        rsp.takenRewardIdList = [];
        context.send(GetChallengeRaidInfoScRsp, rsp);
    }

    public GetMazeTimeOfDayCsReq(context: PacketContext<GetMazeTimeOfDayCsReq>){
        const rsp = GetMazeTimeOfDayScRsp.create();
        rsp.retcode = 0;
        rsp.mazeTimeOfDayMap = [];
        context.send(GetMazeTimeOfDayScRsp, rsp);
    }

    public GetMazeCsReq(context: PacketContext<GetMazeCsReq>){
        const rsp = GetMazeScRsp.create();
        rsp.retcode = 0;
        rsp.mazeList = [];
        context.send(GetMazeScRsp, rsp);
    }

    public GetChallengeCsReq(context: PacketContext<GetChallengeCsReq>){
        const rsp = GetChallengeScRsp.create();
        rsp.retcode = 0;
        rsp.challengeList = [];
        context.send(GetChallengeScRsp, rsp);
    }
}